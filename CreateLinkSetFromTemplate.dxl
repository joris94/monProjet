#include <D:\users\log\logInclude.dxl>

//! GLOBALS
pragma		encoding, "UTF-8";
//string		folderOfTemplates = "/p-DE-BIE2-TRAIN19";

void errorDisplayExit(string msg)
{
	ack(msg);
	logEnd();
	halt();
}
bool isTemplateModule(Item item)
{	
	string strItem = name (item);
	string strShouldBeXX = strItem[2:3];
	int lenghtStr = length (strItem);
	strShouldBe_tpl = strItem[lenghtStr-4:lenghtStr-1]
	if( (strShouldBeXX != "XX" && strShouldBeXX != "xx") || strShouldBe_tpl != "_tpl"){
		return (false);
	}
	return (true);
}

bool isTemplateModule(Module m)
{
	string strItem = name (m);
	string strShouldBeXX = strItem[2:3];
	int lenghtStr = length (strItem);
	strShouldBe_tpl = strItem[lenghtStr-4:lenghtStr-1]
	if( (strShouldBeXX != "XX" && strShouldBeXX != "xx") || strShouldBe_tpl != "_tpl"){
		return (false);
	}
	return (true);
}


Skip lnkModDescSkip = create; //(key: int, value: LinkModuleDescriptor)

Item itemIsTheTplate;
int lengthKey;
/******************************************************************************
	scanFolder
******************************************************************************/
void scanLinkSetPairingOfFolder(Folder f) 
{
	LinkModuleDescriptor lmd
	//print "\n"name(itemIsTheTplate)"\n"

	Item itm
   	lengthKey = 0
   	int offset, length

	if (null f) return
	for lmd in f do
	{
		//print "Name  "getName(lmd)"\n    source: "getSourceName(lmd)"\n        target: "getTargetName(lmd)"\n"
		//print "\nLooking for: "name(itemIsTheTplate)"    in    "getSourceName(lmd)
		if(findPlainText (getSourceName(lmd), name(itemIsTheTplate), offset, length, true)){
		//	print "\nAdd:\n\t"(getSourceName(lmd))"\n\t\t"getName(lmd)"\n\t\t\t"getTargetName(lmd)
			put(lnkModDescSkip, lengthKey,lmd)
			lengthKey++
		}
	}
			
	for itm in f do //analyze subfolders
	{
		if (null itm) continue
		if (isDeleted(itm)) continue
	   
		if ((type (itm) == "Project") || (type (itm) == "Folder"))
		{
			scanLinkSetPairingOfFolder(folder(itm))	   
		}
	}
}


void main()
{
	Module inputModule = current;
	string moduleName = name(inputModule);
	if (null inputModule){
		errorDisplayExit ("This script shall be executed in a module context");
	}
	if(isTemplateModule(inputModule)){
		errorDisplayExit ("This script shall not be executed on a template module");
	}
	Date dateAndTime = dateAndTime(today());
	print "Running Script - "dateAndTime"\n";

	//get category of module by reading prefix
	string categoryOfModule = name(inputModule);
	categoryOfModule = categoryOfModule[0:1];

	//find template prefixXX_..._tpl template module in current folder
	Folder currentFolder = getParentFolder(inputModule)

	//find template in current folder
	Item itemInCurrentFolder = null;
	string strItemIsTheTplate = null;
	for itemInCurrentFolder in currentFolder do
	{
		//print name itemInCurrentFolder"\n"
		if(isTemplateModule(itemInCurrentFolder)){
			tplateCat = (name(itemInCurrentFolder))[0:1];
			tplateName = (name(itemInCurrentFolder))[4:(length(name(itemInCurrentFolder)))-4]
			rexep = tplateCat"[0-9][0-9]"tplateName
			Regexp I_NAME = regexp2 (rexep)
			if(I_NAME moduleName){
				//print "\n "name(itemInCurrentFolder)" is template of " name(inputModule)"\n"
				strItemIsTheTplate = name (itemInCurrentFolder)
			}
		}
	}
	if(null strItemIsTheTplate){//template not found -> search in 
		//@todo - @JGO DO AFTER IF TPLATE IS NOT FOUND!!
		errorDisplayExit("Template module of this module was not find");
	}
	else
	{ //template found in the current folder
		itemIsTheTplate = item(strItemIsTheTplate)

		Module moduleTplate = read(strItemIsTheTplate,false)
		scanLinkSetPairingOfFolder(getParentFolder(itemIsTheTplate));

		print "\nvaleur : "lengthKey"\n"
		LinkModuleDescriptor lmdOfSkip

		for (iKey = 0; iKey < lengthKey; iKey++){
			print "\nGOGOGO\n"
			find(lnkModDescSkip, iKey,lmdOfSkip)
			print getSourceName(lmdOfSkip)"\n"
			print getName(lmdOfSkip)"\n"
			print getTargetName(lmdOfSkip)"\n"
		}
	}
}

logStart("DVS - Create traceability Links");
main();
logEnd();