//The script lets the user copy paste and rename (with good prefix) a module, then upadete linkset pairs
/*
	Algorithm overview:
		* the user selects a template from a GUI
		* the selected module is copied then pasted in the same folder
		* the user can rename the suffix, the prefix is already calculated to be unique
		* the scripts update linkset pairs of the new module according to the template
*/

#include <D:\users\log\logInclude.dxl>
#include <..\\addins\\Valeo\\admin\\CoreLinksetPairsUpdateADMIN.inc>
#include <..\\addins\\Valeo\\admin\\CoreLinksetPairsUpdateJENKINS.inc>
//! GLOBALS
pragma		encoding, "UTF-8";
Item		itemRefTemplate, itemDestinationFolder;

string		renamedModule;
DBE			dbeField;
int 		intPrefix;
Permission 	allPermission 					= read|modify|create|delete|control //RMCDA

// item filters
const int MINI_EXP_FP                       = 1
const int MINI_EXP_FORMAL_MODS              = 4
bool 	showModules							= null //IF TRUE browser show folder + module, else only folder.
DBE 	onlyTemplateBox						= null
DB     	dbMiniExplorer                      = null
DBE  	dbeMiniExplorerTree                 = null
DBE    	dbeMiniExplorerOkButton             = null
int    	miniExplorerItemMask                = MINI_EXP_FP
string 	miniExplorerSelectedItem            = ""

//***********************************************************
/// @errorDisplayExit(string msg)
/// @brief - Display a message and quit the current script execution

/// @param[in] msg:	The error message to display
//***********************************************************
void errorDisplayExit(string msg)
{
	ack(msg);
	logEnd();
	halt();
}

void exitWithoutError()
{
	logEnd();
	halt();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// ----- TreeView ----- ///////////////////////////////////////////

/******************************************************************************
	isTemplateModule
******************************************************************************/
bool isTemplateModule(Item item)
{	
	string strItem = name (item);
	string strShouldBeXX = strItem[2:3];
	int lenghtStr = length (strItem);
	strShouldBe_tpl = strItem[lenghtStr-4:lenghtStr-1]
	if( (strShouldBeXX != "XX" && strShouldBeXX != "xx") || strShouldBe_tpl != "_tpl"){
		return (false);
	}
	return (true);
}

/******************************************************************************
	itemMatchesMaskModule
******************************************************************************/
bool itemMatchesMaskModule(Item itm)
{
	if (type(itm) == "Formal" )
	{
		if(get (onlyTemplateBox)){
			bool statut = isTemplateModule(itm);
			return (statut);
		}
		return (true);
	}
	/*if (type(itm) == "Link" || type(itm) == "Descriptive" )
	{
		if(get (onlyTemplateBox)){
			bool statut = isTemplateModule(itm);
			return (statut);
		}
		return(true)
	}*/
	return(false)
}

/******************************************************************************
	itemMatchesMaskFolder
******************************************************************************/
bool itemMatchesMaskFolder(Item itm)
{
	if (type(itm) == "Folder" || type(itm) == "Project")
	{
		return(true);
	}
	return(false)
}

/******************************************************************************
	doOk
******************************************************************************/
void doOk(DB db)
{
    miniExplorerSelectedItem = getRealPath(dbSep get(dbeMiniExplorerTree))

    release(dbMiniExplorer)
    hide(dbMiniExplorer)
}



/******************************************************************************
	doActivateOK
******************************************************************************/
void doActivateOK(DBE dbe) 
{
	string sel = getRealPath(dbSep get(dbeMiniExplorerTree))
	if(showModules){
		if (itemMatchesMaskModule(item(sel)))
		{
			miniExplorerSelectedItem = sel
			release(dbMiniExplorer)
			hide(dbMiniExplorer)
		} 
	}else{
		if (itemMatchesMaskFolder(item(sel)))
		{
			miniExplorerSelectedItem = sel
			release(dbMiniExplorer)
			hide(dbMiniExplorer)
		}
	}
}

/******************************************************************************
	doCancel
******************************************************************************/
void doCancel(DB db)
{
    miniExplorerSelectedItem = ""

    release(dbMiniExplorer)
    hide(dbMiniExplorer)
}



/******************************************************************************
	doNothing
******************************************************************************/
void doNothing(DB db)
{
	;
}

/******************************************************************************
	addItem
******************************************************************************/
void addItem(DBE dbe, Item i)
{
	string displayPath = getDisplayPath(i)
	
    // check status
    if (exists(dbeMiniExplorerTree, displayPath) == false)
    {
        // check status
        if (isDeleted(i) == false)
        {
            // check item type
            if (type(i) == "Folder" || type(i) == "Project")
            {
                Icon iconOpen, iconClosed
                string sDummyEntry = displayPath dbSep dummyItem

                // assign project or folder specific icons
                assignIcons(i, iconOpen, iconClosed)
            
                // add entry (plus dummy)                     
                insert(dbeMiniExplorerTree, displayPath, iconClosed, iconOpen)
                insert(dbeMiniExplorerTree, sDummyEntry, iconClosed, iconOpen)   
            }
            else 
            {
				if(showModules){
					if (itemMatchesMaskModule(i))
					{
						if(get (onlyTemplateBox) || hasPermission(doorsname(),getParentProject(i),allPermission)){ // !(!a && !b) =a || b
							insert(dbeMiniExplorerTree, displayPath, getIcon(i), getIcon(i))
						}
					}
				}else{
					if (itemMatchesMaskFolder(i))
					{
						insert(dbeMiniExplorerTree, displayPath, getIcon(i), getIcon(i))
					}
				}
            }
        }
    }
}


/******************************************************************************
	displayBranch
******************************************************************************/
void displayBranch(DBE dbe, string sItemPath)
{
    Folder fStart = folder(getRealPath(sItemPath))
    if (fStart != null) 
    {
        Item i

        for i in all fStart do
        {  
            addItem(dbeMiniExplorerTree, i)               
        }
    }
}

string 		GROUPMEMBER = ""
/******************************************************************************
	changeOkButton
******************************************************************************/
void changeOkButton()
{
	string sel = getRealPath(dbSep get(dbeMiniExplorerTree))
	
	if(showModules){
		if (itemMatchesMaskModule(item(sel)))
		{
			active(dbeMiniExplorerOkButton)
		} else
		{
			inactive(dbeMiniExplorerOkButton)
		}
	}else{
		if (itemMatchesMaskFolder(item(sel)))
		{
			active(dbeMiniExplorerOkButton)
		} 
		else
		{
			inactive(dbeMiniExplorerOkButton)
		}
	}
}



/******************************************************************************
	changeCheckbox
******************************************************************************/
void changeCheckbox()
{
	string sel = getRealPath(dbSep get(dbeMiniExplorerTree))
	Item i = item(sel)
	Project p = null;
	if(type(i) == "Project") {
		p = project (i)
	}else{
		p = getParentProject(i)
	}
	if(!null p){
		if(showModules){
			if (hasPermission(doorsname(),p ,allPermission))
			{
				active(onlyTemplateBox)
			} else
			{
				inactive(onlyTemplateBox)
			}
		}
	}

}



/******************************************************************************
	doSelect
******************************************************************************/
void doSelect(DBE dbe) 
{
	changeOkButton()
	changeCheckbox()
}



/******************************************************************************
	doExpand
******************************************************************************/
bool doExpand(DBE dbe, string sItem) 
{
    string sItemPath = dbSep sItem
    string sDummyItem = sItemPath dbSep dummyItem
    if (exists(dbeMiniExplorerTree, sDummyItem) == true)
    {
        // remove dummy		
        delete(dbeMiniExplorerTree, sDummyItem)
    }
    // check status
    if (theCurrentView == DATABASE_VIEW)
    {
        // adjust view accordingly    
        displayBranch(dbeMiniExplorerTree, sItemPath)
    }
    else
    {
        Project prjOldRoot = getRootProject_()
        setRootProject_(project(getRootOfPath sItemPath))
        // adjust view accordingly    
        displayBranch(dbeMiniExplorerTree, sItemPath)
        setRootProject_(prjOldRoot)
    }
    return true
}


/******************************************************************************
	fnChangeToStartFolder
******************************************************************************/
void fnChangeToStartFolder(Folder fStart)
{
    if (!null fStart)
    {
        int iInde
        // calculate max bound for loop
        int iFinish = length(rootName_(fStart))
        // prepare initial path
        string sFolderPath = ((theCurrentView == DATABASE_VIEW) ? dbDisplayRoot() : "")
        // process string
        for iIndex in 0 : iFinish by 1 do
        {
            // obtain character
            string sCharacter = (rootName_(fStart))[iIndex:iIndex]
            // check status
            if (sCharacter == dbSep || iIndex == iFinish) 
            {
                // check status
                if (theCurrentView == PROJECT_VIEW && sFolderPath == dbSep) 
					continue
                // update explorer
                displayBranch(dbeMiniExplorerTree, sFolderPath)
            }
            sFolderPath = sFolderPath sCharacter
        }   
        // update explorer
        set(dbeMiniExplorerTree, sFolderPath)
    }
    else
    {
        // default to database level
        displayBranch(dbeMiniExplorerTree, dbDisplayRoot())
        set(dbeMiniExplorerTree, dbDisplayRoot())
    }
}

/******************************************************************************
	checkBoxReact
******************************************************************************/
void checkBoxReact(DBE dbe)
{
    changeOkButton();
    string sel = getRealPath(dbSep get(dbeMiniExplorerTree))
    Item it = item sel
	Project p =  getParentProject (it)
	Folder selectInTree = getParentFolder(it)
	if(type it == "Folder"){
		selectInTree = folder(it);
	}
	if(null p){
		p = project (it);
		uniqueIdProject = uniqueID(p);
		it = itemFromID(uniqueIdProject);
		selectInTree = folder it;
	}
    if (p != null) 
    {
        Item i
        string displayPath;
        for i in p do
        {
        	displayPath = getDisplayPath(i)
        	if (get(onlyTemplateBox)){ 
				if(type i == "Formal" && !isTemplateModule(i)){
        			delete(dbeMiniExplorerTree, displayPath)
        		}
    		}else{ 
				if(type i == "Formal" && !isTemplateModule(i)){
        			addItem(dbeMiniExplorerTree, i)
        		}
    		}

        }
        fnChangeToStartFolder(selectInTree);       
    }
}

/******************************************************************************
	miniExplorer
	
	Provides a tree view for user to select an item from the database.
	
	Parameters:
	
		dbParent		Parent dialog box. Returns focus to this dialog
						on closing.
						
		fStart			Folder to open in the tree when the dialog is first
		                displayed.	
		                
		itemMask		Mask used to filter items that are displayed.
		                
		okActiveOnFolder		If true display folders/module/link/Descriptives, else only folders
		
	Returns fullname of selected item or an empty string.
******************************************************************************/
string miniExplorer(DB  dbParent, 
                        Folder fStart, 
                        int    itemMask,
						string txt,
						bool okActiveOnFolder)
{
	showModules = okActiveOnFolder;
	string  pName = ""
    Project pRoot = null

	miniExplorerItemMask   = itemMask 
        
    if (null dbParent)
    {
	    dbMiniExplorer = create("Browser")
    }
    else
    {
    	dbMiniExplorer = create(dbParent, "Browser")
	}

    label(dbMiniExplorer, txt)

    dbeMiniExplorerTree = treeView(dbMiniExplorer, treeViewOptionSorted, 400, 15)

    dbeMiniExplorerOkButton = apply(dbMiniExplorer, "OK", doOk)

	// create our own close and ok buttons
	close(dbMiniExplorer, false, doNothing)
	ok(dbMiniExplorer, "Cancel", doCancel)
	
	if(showModules){
		onlyTemplateBox = toggle(dbMiniExplorer, "Only select templates modules (Admin)", true)
		set(onlyTemplateBox, checkBoxReact)
		inactive(onlyTemplateBox) //only active it if the parentFolder of selected template module is on CONTROL access right (admin)
	}
    
	realize dbMiniExplorer
	set(dbeMiniExplorerTree, doSelect, doActivateOK);
    set(dbeMiniExplorerTree, doExpand)
	
    inactive(dbeMiniExplorerOkButton)
    // check status
    if (theCurrentView == DATABASE_VIEW)
    {
        // adjust accordingly
        insert(dbeMiniExplorerTree, dbDisplayRoot(), iconDatabase, iconDatabase)    
    }
    else
    {
        pRoot = getRootProject_()
        setRootProject_(null)

        // process database
        for pName in database do
        {
            addItem(dbeMiniExplorerTree, item(dbSep pName))
        }
        setRootProject_(pRoot)
    }

    fnChangeToStartFolder(fStart)

    block(dbMiniExplorer)

    destroy(dbMiniExplorer)

    return(miniExplorerSelectedItem)
}

/////////////////////////////////////////// ----- TreeView ----- ///////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////



//***********************************************************
/// @getUserSelection(string infoString)
/// @brief User selects module containing list of formal modules by browsing DOORS
///
/// @param[in] infoString:	The source template item

/// @return string userSel
///
//***********************************************************

DB  db
DBE dbeBrowse
DBE dbeModule

string getUserSelection(string infoString,  bool moduleTrueOrFolder )
{	
	db = create("Demonstrate Mini Explorer")
	Item i = getSelectedItem();
	Folder folderBrowser;
	if(type i != "Folder" && type i != "Project"){
		folderBrowser = getParentFolder(i);
	}else{
		folderBrowser = folder(i);
	}
  //  string userSel = fnMiniExplorer(folderBrowser, MINI_EXP_FORMAL_MODS, "Browse", infoString);
	string userSel = miniExplorer(db, current Folder, MINI_EXP_FORMAL_MODS, infoString, /*true : show module, else folders+modules*/moduleTrueOrFolder);

    return userSel ;
}


//***********************************************************
/// @createItemfromTemplate(string src_template, string new_name, string new_desc, Folder f_dest)
/// @brief Copy the template module, paste it to the destination folder then rename the module
///
/// @param[in] src_template:	The source template item
/// @param[in] new_name:	The new item name 
/// @param[in] new_desc:	The new item description
/// @param[in] f_dest:		The new item  destination folder
///
//***********************************************************
string createItemfromTemplate(Item i_ref, string new_name, string new_desc, Folder f_dest)
{ 
	Folder f_ref
	string errmsg = ""
	string template_name
	string full_template_name
	string f_dest_name
	const string ROOT = "/"
	

	// Get the current configuration

	f_dest_name = fullName(f_dest)
	if (f_dest_name == ROOT) f_dest_name = ""
	template_name = name(i_ref)
	full_template_name = fullName(i_ref)
	f_ref = getParentFolder(i_ref)

	// Copy Paste from template in current configuration
	clipCopy(i_ref)

	errmsg = clipPaste(f_ref)
	if(!null errmsg) {
		return errmsg
	}

	errmsg = clipClear(true)
	if(!null errmsg){
		return errmsg
	}

	//Find the new created item in  destination folder(must be "Copy of" template_name))
	Item new_item
	Item i
	string copy_name
	Regexp I_NAME = regexp2 "(^.*)" template_name "$"
	//
	for i in f_ref do {
		copy_name = fullName(i)
		if (I_NAME copy_name){
	   		if (i != i_ref){
				new_item = i
			}
	  	}
	}
	//Move new item to destination folder
	errmsg = move(new_item, f_dest)
	if(!null errmsg){
		delete(new_item)
		purge (new_item)
		return errmsg
	}

	//Rename the new created item from  "Copy of name(i)"  to "new_name"
	errmsg = rename (new_item, new_name, new_desc)
	if(!null errmsg){
		delete(new_item)
		purge (new_item)
        return errmsg
		//errorDisplayExit ((name(i_ref))"\nError message: "errmsg,false);
	}
	return ""//Make the new item visible			    
}//createItemfromTemplate//createItemfromTemplate




void run_Copy_fct(DB box) {
	//////Rename the output//////
	string finalRenaming = renamedModule get(dbeField)
	string errMsg = createItemfromTemplate(itemRefTemplate, finalRenaming, description(itemRefTemplate), folder(itemDestinationFolder))
	if(!null errMsg){
		errorDisplayExit(("Error while instantiating template module : "errMsg))
	}
	//Ask for update linkset Pairs
	Module moduleToUpdateLinks = read(fullName(folder(itemDestinationFolder))"/"finalRenaming, false)
	ModName_ mod = module(fullName(moduleToUpdateLinks))

	setLinkModuleDescriptorsExclusive(folder(itemDestinationFolder),mod,true) //only allow outgoing links (checkbox in module property)
	if(!null moduleToUpdateLinks){
		Permission allPermission = read|modify|create|delete|control //RMCDA
		if(hasPermission(doorsname(),getParentFolder(moduleToUpdateLinks),allPermission)){
			string argument = getURL(moduleToUpdateLinks)
			runUpdate(argument)
		}else{
			requestUpdate(moduleToUpdateLinks)
		}
	}
}


/******************************************************************************
	getTemplateOfModule
	Scan the folder of the input model to find template
******************************************************************************/
string getTemplateOfModule(Folder f, Module m)
{
	Item itemInFolder
	for itemInFolder in f do
	{
		if (type(itemInFolder) == "Formal") {
			if(isTemplateModule(itemInFolder)){
				tplateCat = (name(itemInFolder))[0:1];
				tplateName = (name(itemInFolder))[4:(length(name(itemInFolder)))-8]
				rexep = tplateCat"[0-9][0-9]"tplateName
				Regexp I_NAME = regexp2 (rexep)
				if(I_NAME name(m)){
					//print "\n "name(itemInFolder)" is template of " name(inputModule)"\n"
					return fullName (itemInFolder)
				}
			}
		}
	}
	return ""
}

/******************************************************************************
    isFreePrefix
******************************************************************************/
bool isFreePrefix(Project p ,string prefix)
{
    //input : 4 chiffres 
    Item i
    bool freePrefix = true
    for i in p do {
        if (type(i) == "Formal"){
            if((name(i))[0:3] == prefix){
                return (false)
            }
        }
    }
    return (true)
}

/******************************************************************************
	replaceString
******************************************************************************/
string replaceString (string sSource, string sSearch, string sReplace) {
    int iLen = length sSource
    if (iLen == 0) return ""
    
    int iLenSearch = length(sSearch)
    
    if (iLenSearch == 0) { 
        //raiseError ("Parameter error", "in strings.inc/replace: search string must not be empty")
        return "" 
    }
    
    // read the first char for latter comparison -> speed optimization
    char firstChar = sSearch[0]
    
    Buffer s = create() 
    int pos = 0, d1,d2;    
    int i
    
    while (pos < iLen) { 
        char ch = sSource[pos]; 
        bool found = true
        
        if (ch != firstChar) {pos ++; s+= ch; continue}
        for (i = 1; i < iLenSearch; i++) {
           if (sSource[pos+i] != sSearch[i]) { found = false; break }
        }
        if (!found) {pos++; s+= ch; continue}
        s += sReplace
        pos += iLenSearch
    }
    
    string result = stringOf s
    delete s
    return result
}


/******************************************************************************
	getRenamingModule
******************************************************************************/
string getRenamingModule(Item i){
	string tmp =  replaceString(name(i),"_tpl","");
	string prefix = (name(i))[0:1]"01"
	int intStr = 1
	while (!isFreePrefix(getParentProject(i), prefix)){
       intStr++
       if(intStr<10){
           prefix = (prefix[0:1])"0"intStr""
       }
       else{ 
           prefix = (prefix[0:1])intStr""
       }
    }
    return prefix tmp[4:]
}


//***********************************************************
/// @run_GUI()
/// @brief Run the major function of the script which contains three steps with GUI. 
/// @brief Step 1 --- USER SELECTION - FORMAL MODULE TEMPLATE
/// @brief Step 2 --- USER SELECTION - FOLDER DESTINATION
/// @brief Step 3 --- RENAMING
///
//***********************************************************
void runGUI ()
{
	////////STEP 1 --- USER SELECTION - FORMAL MODULE TEMPLATE////////
	string formalModuleTemplate  = "";
    formalModuleTemplate   = getUserSelection("STEP 1 : Select a Formal Module Template", true);
	if(null formalModuleTemplate){
		exitWithoutError();
	}
	itemRefTemplate = item(formalModuleTemplate );
	
	Folder fDest = getParentFolder(itemRefTemplate)
	itemDestinationFolder = item(fullName(fDest));       

	////////STEP 2 --- RENAME////////
	DB db2 = create("STEP 2 : Rename", styleCentered);
	label (db2, "New module name :");
	
	string toEnter = "", renamedModule ="";
	if(isTemplateModule(itemRefTemplate))
	{
		renamedModule = getRenamingModule(itemRefTemplate)
	}else if (isValidInt((name(itemRefTemplate))[0:3])){ //not a template but instance of a template (so start with 1101 for instance)
		//find a template
		string templateOfInput = getTemplateOfModule(getParentFolder(itemRefTemplate), read((fullName(itemRefTemplate)),false))
		if (null templateOfInput){
			errorDisplayExit("No template found for input module.")
		}
		Item i = item (templateOfInput);
		renamedModule = getRenamingModule(i) 
	}else{
		toEnter = name(itemRefTemplate);
	}
		//dbeField = field(db2,renamedModule,"", 50, false);

	dbeField = field(db2,renamedModule,toEnter, 50, false);
	ok(db2, "Run", run_Copy_fct);
	realize db2;
	show db2;
}//run_GUI



void main()
{
	//Date dateAndTime = dateAndTime(today());
	//print "Running Script - "dateAndTime"\n";
	runGUI();
}

logStart("DVS - Copy Module from Template")
main();
logEnd();