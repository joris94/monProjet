//#include <logInclude.dxl>
#include <D:\users\log\logInclude.dxl>

//! GLOBALS
pragma      encoding, "UTF-8";
Skip        lnkModName = create;
Skip        lnkModTgt = create;
int         lengthKey = 0;
string      folderOfDVSTemplates = "/p-DE-BIE2-TRAIN19" //should be changed for production database
Stream 		writtingBuf;
const string fileToWrite = "D:\\Users\\"doorsname"\\tempUpdateLinkset.txt"

/******************************************************************************
    writeMsg
******************************************************************************/
void writeMsg(string txt)
{
	//print txt
	writtingBuf << txt
}

/******************************************************************************
    isTemplateModule
******************************************************************************/
bool isTemplateModule(Item i)
{
    string strItem = name (i);
    string strShouldBeXX = strItem[2:3];
    int lenghtStr = length (strItem);
    strShouldBe_tpl = strItem[lenghtStr-4:lenghtStr-1]
    if( (strShouldBeXX != "XX" && strShouldBeXX != "xx") || strShouldBe_tpl != "_tpl"){
        return (false);
    }
    return (true);
}
/******************************************************************************
    itemMatchesMask
******************************************************************************/
bool itemMatchesMask(Item itm)
{
    if (type(itm) == "Formal" && isTemplateModule(itm))
    {
        return(true)
    }
    return(false)
}




/******************************************************************************
    errorDisplayExit
******************************************************************************/
void errorDisplayExit(string msg, bool showMsg)
{
    writeMsg(msg);
    close (writtingBuf)
    logEnd();
    halt();
}


/******************************************************************************
    scanLinkSetPairingOfFolder
    Scan the folder of the module (global variable: itemIsTheTplate) to find
    linkset Paring with this module as source
******************************************************************************/
void scanLinkSetPairingOfFolder(Folder f, Item i) 
{
    LinkModuleDescriptor lmd
    int offset, length
    if (null f) return
    for lmd in f do
    {
        if(findPlainText (getSourceName(lmd), name(i), offset, length, true)){
            //writeMsg "\nAdd:\n\t"(getSourceName(lmd))"\n\t\t"getName(lmd)"\n\t\t\t"getTargetName(lmd)
            put(lnkModName, lengthKey,getName(lmd))
            put(lnkModTgt, lengthKey,getTargetName(lmd))
            lengthKey++
        }
    }
    Item itm
    for itm in f do //analyze subfolders
    {
        if (null itm) continue
        if (isDeleted(itm)) continue
       
        if ((type (itm) == "Project") || (type (itm) == "Folder"))
        {
            scanLinkSetPairingOfFolder(folder(itm),i)      
        }
    }
}


/******************************************************************************
    getTemplateOfModuleFromDVS
    Scan the dvs folder that contains templates and find the corresponding
    template of the input module
******************************************************************************/
string getTemplateOfModuleFromDVS(Item itmWork, Module m) {
    if (type(itmWork) == "Project") {
        Item itmHelp;
        for itmHelp in folder(itmWork) do {
            str = getTemplateOfModuleFromDVS(itmHelp,m);
            if(!null str) return str
        }
    }
    if (type(itmWork) == "Folder") {
        Item itmHelp;
        for itmHelp in folder(itmWork) do {
            str = getTemplateOfModuleFromDVS(itmHelp,m);
            if(!null str) return str
        }
    }
    if (type(itmWork) == "Formal") {
        //writeMsg "found "name itmWork"\n"
        if(isTemplateModule(itmWork)){
            tplateCat = (name(itmWork))[0:1];
            tplateName = (name(itmWork))[4:(length(name(itmWork)))-4]
            rexep = tplateCat"[0-9][0-9]"tplateName
            Regexp I_NAME = regexp2 (rexep)
            if(I_NAME name(m)){
                //writeMsg "\n "name(itmWork)" is template of " name(inputModule)"\n"
                return fullName (itmWork)
            }
        }
    }
    return
}

/******************************************************************************
    getTemplateOfModule
    Scan the folder of the input model to find template
******************************************************************************/
string getTemplateOfModule(Folder f, Module m)
{
    Item itemInFolder
    for itemInFolder in f do
    {
        if (type(itemInFolder) == "Formal") {
            if(isTemplateModule(itemInFolder)){
                tplateCat = (name(itemInFolder))[0:1];
                tplateName = (name(itemInFolder))[4:(length(name(itemInFolder)))-8]
                rexep = tplateCat"[0-9][0-9]"tplateName
                Regexp I_NAME = regexp2 (rexep)
                if(I_NAME name(m)){
                    //writeMsg "\n "name(itemInFolder)" is template of " name(inputModule)"\n"
                    return fullName (itemInFolder)
                }
            }
        }
    }
    return 
}



/******************************************************************************
    urlInfo
    Analyze the URL
******************************************************************************/


void generateLinksetPairs(Module inputModule)
{


    Item iModule = item(fullName(inputModule))
    //writeMsg "\n"getModuleNameFromURL(moduleNameFromURL)"\n"
    if (null inputModule){
        errorDisplayExit ("The URL shall be linked to a module",true);
    }
    if( isTemplateModule(iModule)){
        errorDisplayExit ("This script shall not be executed on a template module",true);
    }
    Date dateAndTime = dateAndTime(today());
    //writeMsg "Running Script UpdateLinksetPairsBatch - "dateAndTime"\n";


    /////////////////////////////////////////////////////////////
    ///////////////////////Search Template///////////////////////
    /////////////////////////////////////////////////////////////
    Folder currentFolder = getParentFolder(inputModule)
    string templateName = getTemplateOfModule(currentFolder,inputModule);   //find template in current folder   
    if(null templateName){//template not found in the current folder -> search in DVS template folders
        errorDisplayExit( "Template not found in current folder...\n",false);
    }
    //writeMsg "---> Template of \""name(inputModule) "\" is \""templateName"\".\n"
    Module moduleTplate = read(templateName,false)

    /////////////////////////////////////////////////////////////
    ///////////////////Compute Linkset Pairing///////////////////
    /////////////////////////////////////////////////////////////
    scanLinkSetPairingOfFolder(getParentFolder(item(templateName)), item(templateName)); //create two skip list "lnkModName" and lnkModTgt"
    if(lengthKey == 0){
        errorDisplayExit("No linkset pairing to perform according to the template.",false);
    }
    string target,expr, prefixTget, targetName, dirTget, nameLnk
    Regexp EXPR_reg
    Folder fTarget;
    Item itemInF;
    int iKey = 0;
    for (iKey = 0; iKey < lengthKey ; iKey++)
    {
        find(lnkModTgt,iKey,target);
        find(lnkModName,iKey,nameLnk);
        expr = "[0-9][0-9]xx_.*_tpl"
        EXPR_reg = regexp2 (expr)
        if(!EXPR_reg target){//should not happen...
            errorDisplayExit("Error target of template.",false)
        }
        targetName = target[match 0] 
        prefixTget = targetName[0:1]
        int offset, length
        findPlainText(target, targetName, offset, length, true)
        dirTget = target[0:offset-1]

        //Now find all target in fTarget that begin with prefixTget without XX
        fTarget = folder(dirTget)
        for itemInF in fTarget do
        {
            if (type itemInF == "Formal" && !isTemplateModule(itemInF) && (name(itemInF))[0:1] == prefixTget){
                ///////////////////CREATE LINKSET PAIRING///////////////////
                msg = addLinkModuleDescriptor(currentFolder, fullName(inputModule), fullName(itemInF), false, true, nameLnk, "")
                if(!null msg){
                    writeMsg "\nProblem while creating link : \n"name(inputModule)" ->  " nameLnk " -> "fullName(itemInF)"\nERROR: "msg"\n"
                }
                else
                {
                    writeMsg "\nLinking : "name(inputModule)" ->  " nameLnk " -> "fullName(itemInF)" \n"
                }
            }
        }
    }
}



void main(string url)
{
    string result = null
    ModuleVersion moduleFromURL
    int objectAbsno 
    Item i
    string dbHost = null 
    int dbPort = null 
    string dbName = null 
    string dbID  = null 
    result = decodeURL(url, dbHost, dbPort, dbName, dbID, i, moduleFromURL, objectAbsno)
    if (!null result)
    {
        errorDisplayExit("An error occured with URL input : "result"\n",false)
    } 
    Module m = load(moduleFromURL, false)
    if(null m){
       errorDisplayExit("Error, The URL does not link to a module.",false)
    }
    writtingBuf = write(fileToWrite)
    generateLinksetPairs(m); //3701_MdRs_Main
    close (writtingBuf)
}

logStart("DVS - Update Linkset Pairs (from jenkins job)");
main("doors://doorscda-pp:36677/?version=2&prodID=0&view=00000006&urn=urn:telelogic:fc0791cf-f0fb-11e5-88f8-93d8defe90ca:1-43463251374b73b7-O-10-00092004")
logEnd();